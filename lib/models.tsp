namespace Graph.Models {
  /**
   * Represents the request body for sending an email.
   */
  model SendMailRequest {
    /**
     * The message to be sent.
     */
    message: EmailMessage;

    /**
     * Indicates whether to save the sent message in the Sent Items folder.
     * Default is true.
     */
    saveToSentItems?: boolean = true;
  }

  /**
   * Represents an email message.
   */
  model EmailMessage {
    /**
     * The subject of the email.
     */
    subject: string;

    /**
     * The body of the email.
     */
    body: EmailBody;

    /**
     * The email addresses of the CC recipients.
     */
    ccRecipients?: EmailAddress[];

    /**
     * The email addresses of the recipients.
     */
    toRecipients: EmailAddress[];
  }

  /**
   * Represents the body of an email.
   */
  model EmailBody {
    /**
     * The content of the email body.
     */
    content: string;

    /**
     * The type of the email body content.
     * Default is HTML.
     */
    contentType?: EmailBodyContentType = EmailBodyContentType.Html;
  }

  /**
   * Represents an email address.
   */
  model EmailAddress {
    /**
     * The email address.
     */
    address: string;

    /**
     * The name associated with the email address.
     */
    name?: string;
  }

  /**
   * Enum for the content type of the email body.
   */
  enum EmailBodyContentType {
    /**
     * The content is in HTML format.
     */
    Html: "html",

    /**
     * The content is in plain text format.
     */
    Text: "text",
  }

  /**
   * Represents a task in Microsoft To Do.
   */
  model Task {
    /**
     * The unique identifier of the task.
     * The ID is automatically generated by the service, so it cannot be set when the resource is created or updated,
     * but the server will return it when the resource is read.
     */
    @visibility(Lifecycle.Read)
    id?: string;

    /**
     * The title of the task.
     */
    title: string;

    /**
     * The description of the task.
     */
    description?: string;

    /**
     * The importance of the task. Can be "low", "normal", or "high".
     */
    importance?: "low" | "normal" | "high" = "normal";

    /**
     * The status of the task. Can be "notStarted", "inProgress", "completed", or "waitingOnOthers".
     */
    status?: "notStarted" | "inProgress" | "completed" | "waitingOnOthers" = "notStarted";

    /**
     * The due date and time of the task.
     */
    dueDateTime?: DateTimeTimeZone;

    /**
     * Set to true if the task need to alert the user when it is due.
     */
    isReminderOn?: boolean = false;

    /**
     * The date and time when the task has to be reminded to the user.
     */
    reminderDateTime?: DateTimeTimeZone;
  }

  model TodoTaskList {
    /**
     * The unique identifier of the task list.
     */
    id: string;

    /**
     * The display name of the task list.
     */
    displayName: string;

    /**
     * Indicates whether the user is the owner of the task list.
     */
    isOwner: boolean;

    /**
     * Indicates whether the task list is shared.
     */
    isShared: boolean;

    /**
     * The well-known name of the task list, if applicable.
     */
    wellknownListName?: string;
  }

  model DateTimeTimeZone {
    /**
     * The date and time in the specified time zone. The date time is represented as an ISO 8601 string. Example: 2022-01-01T00:00:00.0000000
     */
    dateTime: string;

    /**
     * The time zone in which the date time is specified. The IANA time zone database is used to determine the time zone. Example: Pacific Standard Time
     */
    timeZone: string;
  }

  /**
   * Represents an error response from the Microsoft Graph API.
   */
  @error
  model ErrorResponse {
    error: {
      /**
       * The error code.
       */
      code: string;

      /**
       * A message describing the error.
       */
      message: string;
    };
  }
}
